# Use these fields to override the name of the deployment
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set, a name is generated using the fullname template
  name: ""

controller:
  image:
    url: "artifactory.azure.dsb.dk:443/docker-local/dsb.kong.controller/dsb.kong.controller:20221018-95-9308a8d"
    pullPolicy: IfNotPresent

  # Specify the ingress suffix (eg. azure.dsb.dk) of API's deployed to the cluster that this instance of the portal controller will handle.
  # This information is used to enrich the API spec with servers: url before submitting it to the kong portal. 
  # The controller expects the API's ingresses to be either <service-name>.<namespace>.<suffix> for standalone services 
  # or api.<namespace>.<suffix> in case of merged api.
  ingressSuffix: ""

  # Url to the kong admin service of the developer portal that you wish to syncronize.
  kongAdminUrl: ""

  # Name of the secret that contains the RBAC token used to access the kong admin api. The secret must have the RBAC token provided in the 'token' key.
  kongTokenSecret: ""

  # Allows you to disable kong updates when using merge api by changing the values to "false" (all lowercase)
  kongUpdate: "true"

  # Optional list of namespaces to be monitored by this instance usefull when running multiple instances of the controller. 
  # expects either an empty string "" or a comma seperated list of namespaces without spaces eg "ns-1,ns-2,ns-3"
  monitorNamespaces: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # Not enabled by default, but values are provided as guidance
    # limits:
    #   cpu: 500m
    #   memory: 256Mi
    # requests:
    #   cpu: 100m
    #   memory: 60Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

# This section controlls if the controller will attempt to merge api definitions into a single api, and how this will be exposed.
# If this feature is enabled monitored namespaces should only contain a single value.
# Enabling this feature deployes a configuration object that alters the behaviour of the controller.
mergeApi:
  enabled: false

# Mandatory Basic descriptive fields for the api, should always be filled out
  title: ""
  description: ""

# Optional field to display a link to the api's licenses can also be used to link to a more descriptive documentation
  licenseName: ""
  licenseUrl: ""

# Optional contact email, if not provided feature is disabled
  contactEmail: ""

# Optional fields to activate api security, scheme supports one of 3 values "JWTBearer, ApiKey, BasicAuth"
# securityKeyName field is only used if ApiKey is provided as securityScheme,
  securityScheme: ""
  securityKeyName: ""

# Optional Terms of service url can link to anything but link text is hardcoded to "Terms of service"
  termsUrl: ""

# Optional component to expose the merged swagger definition through an ingress.
# Enabling this feature deployes a ui service to expose the merged api and creates an ingress to allow access to the documentation.
portal:
  image:
    url: "artifactory.azure.dsb.dk:443/docker-local/dsb.kong.controller/dsb.kong.portal.ui:20221018-95-9308a8d"
    pullPolicy: IfNotPresent

  enabled: false

  # Namespace where the api's merged data is located typically the same as monitored namespace
  # named api.<namespace>
  lookupNamespace: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # Not enabled by default, but values are provided as guidance
    # limits:
    #   cpu: 500m
    #   memory: 256Mi
    # requests:
    #   cpu: 100m
    #   memory: 60Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Ingress for the merged api is used to expose a swagger defintion at the provided endpoint, should follow "api.<namespace>.<suffix>"
  # where namespace is the controllers monitored namespace, and suffix is the controllers ingressSuffix
  ingress: ""

  # Ingress class for the deployed ingress
  ingressClassName: "kong"

  # Annotations added to the ingress
  ingressAnnotations: {}
